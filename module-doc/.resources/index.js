var index = [
{'name': 'io.vertx.ceylon', 'type': 'package', 'url': 'index.html#section-package', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'Registration.completed', 'type': 'value', 'url': 'Registration.type.html#completed', 'doc': '<p>Resolved when the registration is complete</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Registration.cancel', 'type': 'function', 'url': 'Registration.type.html#cancel', 'doc': '<p>Cancel the registration, this is an asynchronous operation.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Registration', 'type': 'interface', 'url': 'Registration.type.html', 'doc': '<p>A registration, the <code>completed</code> promise is resolved when the registration is completed, the <code>cancel()</code> method\ncan be…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'run', 'type': 'function', 'url': 'index.html#run', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'run2', 'type': 'function', 'url': 'index.html#run2', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.eventBus', 'type': 'value', 'url': 'Vertx.type.html#eventBus', 'doc': '<p>The event bus</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.sharedData', 'type': 'value', 'url': 'Vertx.type.html#sharedData', 'doc': '<p>The shared data object</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.fileSystem', 'type': 'value', 'url': 'Vertx.type.html#fileSystem', 'doc': '<p>The File system object</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.createHttpServer', 'type': 'function', 'url': 'Vertx.type.html#createHttpServer', 'doc': '<p>Create a new http server and returns it</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.createHttpClient', 'type': 'function', 'url': 'Vertx.type.html#createHttpClient', 'doc': '<p>Create a new http client and return it</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.setTimer', 'type': 'function', 'url': 'Vertx.type.html#setTimer', 'doc': '<p>Set a one-shot timer to fire after <a class=\'link\' href=\'Vertx.type.html#setTimer-delay\' title=\'Go to io.vertx.ceylon::Vertx.setTimer.delay\'>delay</a> milliseconds, at which point <a class=\'link\' href=\'Vertx.type.html#setTimer-handle\' title=\'Go to io.vertx.ceylon::Vertx.setTimer.handle\'>handle</a> will be called with\nthe id of the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.setPeriodic', 'type': 'function', 'url': 'Vertx.type.html#setPeriodic', 'doc': '<p>Set a periodic timer to fire every <a class=\'link\' href=\'Vertx.type.html#setPeriodic-delay\' title=\'Go to io.vertx.ceylon::Vertx.setPeriodic.delay\'>delay</a> milliseconds, at which point <a class=\'link\' href=\'Vertx.type.html#setPeriodic-handle\' title=\'Go to io.vertx.ceylon::Vertx.setPeriodic.handle\'>handle</a> will be called with\nthe id of the…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.runOnContext', 'type': 'function', 'url': 'Vertx.type.html#runOnContext', 'doc': '<p>Put the handler on the event queue for the current loop (or worker context) so it will be run asynchronously\nASAP after…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.cancelTimer', 'type': 'function', 'url': 'Vertx.type.html#cancelTimer', 'doc': '<p>Cancel the timer with the specified <a class=\'link\' href=\'Vertx.type.html#cancelTimer-id\' title=\'Go to io.vertx.ceylon::Vertx.cancelTimer.id\'>id</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx.stop', 'type': 'function', 'url': 'Vertx.type.html#stop', 'doc': '<p>Stop Vertx</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Vertx', 'type': 'class', 'url': 'Vertx.type.html', 'doc': '<p>The control centre of the Vert.x Core API.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'io.vertx.ceylon.eventbus', 'type': 'package', 'url': 'eventbus/index.html', 'doc': '<h1>The Event Bus</h1>\n<p>The event bus is the nervous system of Vert.x.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'EventBus.send', 'type': 'function', 'url': 'eventbus/EventBus.type.html#send', 'doc': '<p>Send a message via the event bus.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EventBus.publish', 'type': 'function', 'url': 'eventbus/EventBus.type.html#publish', 'doc': '<p>Publish a message</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EventBus.registerHandler', 'type': 'function', 'url': 'eventbus/EventBus.type.html#registerHandler', 'doc': '<p>Registers a handler against the specified address.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EventBus', 'type': 'class', 'url': 'eventbus/EventBus.type.html', 'doc': '<p>A distributed lightweight event bus which can encompass multiple vert.x instances.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Message.reply', 'type': 'function', 'url': 'eventbus/Message.type.html#reply', 'doc': '<p>Reply to this message.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Message', 'type': 'class', 'url': 'eventbus/Message.type.html', 'doc': '<p>Represents a message on the event bus.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Payload', 'type': 'alias', 'url': 'eventbus/index.html#Payload', 'doc': '<p>Alias for the type of a message payload</p>\n', 'tags': [],'icons': ['icon-type-alias']},
{'name': 'io.vertx.ceylon.file', 'type': 'package', 'url': 'file/index.html', 'doc': '<h1>File System</h1>\n<p>Vert.x lets you manipulate files on the file system.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'AsyncFile.readStream', 'type': 'attribute', 'url': 'file/AsyncFile.type.html#readStream', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncFile.writeStream', 'type': 'attribute', 'url': 'file/AsyncFile.type.html#writeStream', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncFile.close', 'type': 'function', 'url': 'file/AsyncFile.type.html#close', 'doc': '<p>Close the file.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncFile.write', 'type': 'function', 'url': 'file/AsyncFile.type.html#write', 'doc': '<p>Write a <a class=\'link\' href=\'file/AsyncFile.type.html#write-buffer\' title=\'Go to io.vertx.ceylon.file::AsyncFile.write.buffer\'>buffer</a> to the file at position <a class=\'link\' href=\'file/AsyncFile.type.html#write-position\' title=\'Go to io.vertx.ceylon.file::AsyncFile.write.position\'>position</a> in the file, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncFile.read', 'type': 'function', 'url': 'file/AsyncFile.type.html#read', 'doc': '<p>Reads <a class=\'link\' href=\'file/AsyncFile.type.html#read-length\' title=\'Go to io.vertx.ceylon.file::AsyncFile.read.length\'>length</a> bytes of data from the file at position <a class=\'link\' href=\'file/AsyncFile.type.html#read-position\' title=\'Go to io.vertx.ceylon.file::AsyncFile.read.position\'>position</a> in the file, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncFile.flush', 'type': 'function', 'url': 'file/AsyncFile.type.html#flush', 'doc': '<p>Flush any writes made to this file to underlying persistent storage.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncFile.string', 'type': 'attribute', 'url': 'file/AsyncFile.type.html#string', 'doc': '<p>A developer-friendly string representing the instance.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'AsyncFile', 'type': 'class', 'url': 'file/AsyncFile.type.html', 'doc': '<p>Represents a file on the file-system which can be read from, or written to asynchronously.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'FileProps', 'type': 'class', 'url': 'file/FileProps.type.html', 'doc': '<p>Represents properties of a file on the file system.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'FileSystem.copy', 'type': 'function', 'url': 'file/FileSystem.type.html#copy', 'doc': '<p>Copy a file from the path <a class=\'link\' href=\'file/FileSystem.type.html#copy-from\' title=\'Go to io.vertx.ceylon.file::FileSystem.copy.from\'>from</a> to path <a class=\'link\' href=\'file/FileSystem.type.html#copy-to\' title=\'Go to io.vertx.ceylon.file::FileSystem.copy.to\'>to</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.copySync', 'type': 'function', 'url': 'file/FileSystem.type.html#copySync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#copy\' title=\'Go to io.vertx.ceylon.file::FileSystem.copy\'>FileSystem.copy</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.move', 'type': 'function', 'url': 'file/FileSystem.type.html#move', 'doc': '<p>Move a file from the path <a class=\'link\' href=\'file/FileSystem.type.html#move-from\' title=\'Go to io.vertx.ceylon.file::FileSystem.move.from\'>from</a> to path <a class=\'link\' href=\'file/FileSystem.type.html#move-to\' title=\'Go to io.vertx.ceylon.file::FileSystem.move.to\'>to</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.moveSync', 'type': 'function', 'url': 'file/FileSystem.type.html#moveSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#move\' title=\'Go to io.vertx.ceylon.file::FileSystem.move\'>FileSystem.move</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.truncate', 'type': 'function', 'url': 'file/FileSystem.type.html#truncate', 'doc': '<p>Truncate the file represented by <a class=\'link\' href=\'file/FileSystem.type.html#truncate-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.truncate.path\'>path</a> to length <a class=\'link\' href=\'file/FileSystem.type.html#truncate-len\' title=\'Go to io.vertx.ceylon.file::FileSystem.truncate.len\'>len</a> in bytes, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.truncateSync', 'type': 'function', 'url': 'file/FileSystem.type.html#truncateSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#truncate\' title=\'Go to io.vertx.ceylon.file::FileSystem.truncate\'>FileSystem.truncate</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.chmod', 'type': 'function', 'url': 'file/FileSystem.type.html#chmod', 'doc': '<p>Change the permissions on the file represented by <a class=\'link\' href=\'file/FileSystem.type.html#chmod-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.chmod.path\'>path</a> to <a class=\'link\' href=\'file/FileSystem.type.html#chmod-perms\' title=\'Go to io.vertx.ceylon.file::FileSystem.chmod.perms\'>perms</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.chmodSync', 'type': 'function', 'url': 'file/FileSystem.type.html#chmodSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#chmod\' title=\'Go to io.vertx.ceylon.file::FileSystem.chmod\'>FileSystem.chmod</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.chown', 'type': 'function', 'url': 'file/FileSystem.type.html#chown', 'doc': '<p>Change the ownership on the file represented by <a class=\'link\' href=\'file/FileSystem.type.html#chown-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.chown.path\'>path</a> to <a class=\'link\' href=\'file/FileSystem.type.html#chown-user\' title=\'Go to io.vertx.ceylon.file::FileSystem.chown.user\'>user</a> and <a class=\'link\' href=\'file/FileSystem.type.html#chown-group\' title=\'Go to io.vertx.ceylon.file::FileSystem.chown.group\'>group</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.chownSync', 'type': 'function', 'url': 'file/FileSystem.type.html#chownSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#chown\' title=\'Go to io.vertx.ceylon.file::FileSystem.chown\'>FileSystem.chown</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.props', 'type': 'function', 'url': 'file/FileSystem.type.html#props', 'doc': '<p>Obtain properties for the file represented by <a class=\'link\' href=\'file/FileSystem.type.html#props-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.props.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.propsSync', 'type': 'function', 'url': 'file/FileSystem.type.html#propsSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#props\' title=\'Go to io.vertx.ceylon.file::FileSystem.props\'>FileSystem.props</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.lprops', 'type': 'function', 'url': 'file/FileSystem.type.html#lprops', 'doc': '<p>Obtain properties for the link represented by <a class=\'link\' href=\'file/FileSystem.type.html#lprops-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.lprops.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.lpropsSync', 'type': 'function', 'url': 'file/FileSystem.type.html#lpropsSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#lprops\' title=\'Go to io.vertx.ceylon.file::FileSystem.lprops\'>FileSystem.lprops</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.link', 'type': 'function', 'url': 'file/FileSystem.type.html#link', 'doc': '<p>Create a hard link on the file system from <a class=\'link\' href=\'file/FileSystem.type.html#link-link\' title=\'Go to io.vertx.ceylon.file::FileSystem.link.link\'>link</a> to <a class=\'link\' href=\'file/FileSystem.type.html#link-existing\' title=\'Go to io.vertx.ceylon.file::FileSystem.link.existing\'>existing</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.linkSync', 'type': 'function', 'url': 'file/FileSystem.type.html#linkSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#link\' title=\'Go to io.vertx.ceylon.file::FileSystem.link\'>FileSystem.link</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.symlink', 'type': 'function', 'url': 'file/FileSystem.type.html#symlink', 'doc': '<p>Create a symbolic link on the file system from <a class=\'link\' href=\'file/FileSystem.type.html#symlink-link\' title=\'Go to io.vertx.ceylon.file::FileSystem.symlink.link\'>link</a> to <a class=\'link\' href=\'file/FileSystem.type.html#symlink-existing\' title=\'Go to io.vertx.ceylon.file::FileSystem.symlink.existing\'>existing</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.symlinkSync', 'type': 'function', 'url': 'file/FileSystem.type.html#symlinkSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#symlink\' title=\'Go to io.vertx.ceylon.file::FileSystem.symlink\'>FileSystem.symlink</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.unlink', 'type': 'function', 'url': 'file/FileSystem.type.html#unlink', 'doc': '<p>Unlinks the link on the file system represented by the path <a class=\'link\' href=\'file/FileSystem.type.html#unlink-link\' title=\'Go to io.vertx.ceylon.file::FileSystem.unlink.link\'>link</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.unlinkSync', 'type': 'function', 'url': 'file/FileSystem.type.html#unlinkSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#unlink\' title=\'Go to io.vertx.ceylon.file::FileSystem.unlink\'>FileSystem.unlink</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.readSymlink', 'type': 'function', 'url': 'file/FileSystem.type.html#readSymlink', 'doc': '<p>Returns the path representing the file that the symbolic link specified by <a class=\'link\' href=\'file/FileSystem.type.html#readSymlink-link\' title=\'Go to io.vertx.ceylon.file::FileSystem.readSymlink.link\'>link</a> points to, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.readSymlinkSync', 'type': 'function', 'url': 'file/FileSystem.type.html#readSymlinkSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#readSymlink\' title=\'Go to io.vertx.ceylon.file::FileSystem.readSymlink\'>FileSystem.readSymlink</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.delete', 'type': 'function', 'url': 'file/FileSystem.type.html#delete', 'doc': '<p>Deletes the file represented by the specified <a class=\'link\' href=\'file/FileSystem.type.html#delete-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.delete.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.deleteSync', 'type': 'function', 'url': 'file/FileSystem.type.html#deleteSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#delete\' title=\'Go to io.vertx.ceylon.file::FileSystem.delete\'>FileSystem.delete</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.mkdir', 'type': 'function', 'url': 'file/FileSystem.type.html#mkdir', 'doc': '<p>Create the directory represented by <a class=\'link\' href=\'file/FileSystem.type.html#mkdir-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.mkdir.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.mkdirSync', 'type': 'function', 'url': 'file/FileSystem.type.html#mkdirSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#mkdir\' title=\'Go to io.vertx.ceylon.file::FileSystem.mkdir\'>FileSystem.mkdir</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.readDir', 'type': 'function', 'url': 'file/FileSystem.type.html#readDir', 'doc': '<p>Read the contents of the directory specified by <a class=\'link\' href=\'file/FileSystem.type.html#readDir-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.readDir.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.readDirSync', 'type': 'function', 'url': 'file/FileSystem.type.html#readDirSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#readDir\' title=\'Go to io.vertx.ceylon.file::FileSystem.readDir\'>FileSystem.readDir</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.readFile', 'type': 'function', 'url': 'file/FileSystem.type.html#readFile', 'doc': '<p>Reads the entire file as represented by the path <a class=\'link\' href=\'file/FileSystem.type.html#readFile-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.readFile.path\'>path</a> as a <code>Buffer</code>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.readFileSync', 'type': 'function', 'url': 'file/FileSystem.type.html#readFileSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#readFile\' title=\'Go to io.vertx.ceylon.file::FileSystem.readFile\'>FileSystem.readFile</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.writeFile', 'type': 'function', 'url': 'file/FileSystem.type.html#writeFile', 'doc': '<p>Creates the file, and writes the specified <a class=\'link\' href=\'file/FileSystem.type.html#writeFile-data\' title=\'Go to io.vertx.ceylon.file::FileSystem.writeFile.data\'>data</a> to the file represented by the path <a class=\'link\' href=\'file/FileSystem.type.html#writeFile-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.writeFile.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.writeFileSync', 'type': 'function', 'url': 'file/FileSystem.type.html#writeFileSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#writeFile\' title=\'Go to io.vertx.ceylon.file::FileSystem.writeFile\'>FileSystem.writeFile</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.open', 'type': 'function', 'url': 'file/FileSystem.type.html#open', 'doc': '<p>Open the file represented by <a class=\'link\' href=\'file/FileSystem.type.html#open-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.open.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.openSync', 'type': 'function', 'url': 'file/FileSystem.type.html#openSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#open\' title=\'Go to io.vertx.ceylon.file::FileSystem.open\'>FileSystem.open</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.createFile', 'type': 'function', 'url': 'file/FileSystem.type.html#createFile', 'doc': '<p>Creates an empty file with the specified <a class=\'link\' href=\'file/FileSystem.type.html#createFile-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.createFile.path\'>path</a> and permissions <a class=\'link\' href=\'file/FileSystem.type.html#createFile-perms\' title=\'Go to io.vertx.ceylon.file::FileSystem.createFile.perms\'>perms</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.createFileSync', 'type': 'function', 'url': 'file/FileSystem.type.html#createFileSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#createFile\' title=\'Go to io.vertx.ceylon.file::FileSystem.createFile\'>FileSystem.createFile</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.exists', 'type': 'function', 'url': 'file/FileSystem.type.html#exists', 'doc': '<p>Determines whether the file as specified by the path <a class=\'link\' href=\'file/FileSystem.type.html#exists-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.exists.path\'>path</a> exists, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.existsSync', 'type': 'function', 'url': 'file/FileSystem.type.html#existsSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#exists\' title=\'Go to io.vertx.ceylon.file::FileSystem.exists\'>FileSystem.exists</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.fsProps', 'type': 'function', 'url': 'file/FileSystem.type.html#fsProps', 'doc': '<p>Returns properties of the file-system being used by the specified <a class=\'link\' href=\'file/FileSystem.type.html#fsProps-path\' title=\'Go to io.vertx.ceylon.file::FileSystem.fsProps.path\'>path</a>, asynchronously.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem.fsPropsSync', 'type': 'function', 'url': 'file/FileSystem.type.html#fsPropsSync', 'doc': '<p>Synchronous version of <a class=\'link\' href=\'file/FileSystem.type.html#fsProps\' title=\'Go to io.vertx.ceylon.file::FileSystem.fsProps\'>FileSystem.fsProps</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FileSystem', 'type': 'class', 'url': 'file/FileSystem.type.html', 'doc': '<p>Contains a broad set of operations for manipulating files.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'FileSystemProps', 'type': 'class', 'url': 'file/FileSystemProps.type.html', 'doc': '<p>Represents properties of the file system.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'io.vertx.ceylon.http', 'type': 'package', 'url': 'http/index.html', 'doc': '<h1>Writing HTTP Servers and Clients</h1>\n<h2>Writing HTTP servers</h2>\n<p>Vert.x allows you to easily write full featured, highly…</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'BodyType.accept', 'type': 'function', 'url': 'http/BodyType.type.html#accept', 'doc': '<p>Return true when this body type can parse the specified mime type</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'BodyType.parse', 'type': 'function', 'url': 'http/BodyType.type.html#parse', 'doc': '<p>Parse the data with the specified charset and return the body</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'BodyType', 'type': 'interface', 'url': 'http/BodyType.type.html', 'doc': '<p>The type of an input body, this interface allows to parse the body of a stream plugable</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'binaryBody.accept', 'type': 'function', 'url': 'http/binaryBody.object.html#accept', 'doc': '<p>Return true when this body type can parse the specified mime type</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'binaryBody.parse', 'type': 'function', 'url': 'http/binaryBody.object.html#parse', 'doc': '<p>Parse the data with the specified charset and return the body</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'binaryBody', 'type': 'object', 'url': 'http/binaryBody.object.html', 'doc': '<p>Binary body type</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'binaryBody', 'type': 'value', 'url': 'http/index.html#binaryBody', 'doc': '<p>Binary body type</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'textBody.accept', 'type': 'function', 'url': 'http/textBody.object.html#accept', 'doc': '<p>Return true when this body type can parse the specified mime type</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'textBody.parse', 'type': 'function', 'url': 'http/textBody.object.html#parse', 'doc': '<p>Parse the data with the specified charset and return the body</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'textBody', 'type': 'object', 'url': 'http/textBody.object.html', 'doc': '<p>Text body type</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'textBody', 'type': 'value', 'url': 'http/index.html#textBody', 'doc': '<p>Text body type</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'jsonBody.accept', 'type': 'function', 'url': 'http/jsonBody.object.html#accept', 'doc': '<p>Return true when this body type can parse the specified mime type</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'jsonBody.parse', 'type': 'function', 'url': 'http/jsonBody.object.html#parse', 'doc': '<p>Parse the data with the specified charset and return the body</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'jsonBody', 'type': 'object', 'url': 'http/jsonBody.object.html', 'doc': '<p>JSON body type</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'jsonBody', 'type': 'value', 'url': 'http/index.html#jsonBody', 'doc': '<p>JSON body type</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'findBody', 'type': 'function', 'url': 'http/index.html#findBody', 'doc': '<p>Find a body type for the specified mime type</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.maxPoolSize', 'type': 'attribute', 'url': 'http/HttpClient.type.html#maxPoolSize', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-variable']},
{'name': 'HttpClient.port', 'type': 'attribute', 'url': 'http/HttpClient.type.html#port', 'doc': '<p>The port</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-variable']},
{'name': 'HttpClient.host', 'type': 'attribute', 'url': 'http/HttpClient.type.html#host', 'doc': '<p>The host</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-variable']},
{'name': 'HttpClient.keepAlive', 'type': 'attribute', 'url': 'http/HttpClient.type.html#keepAlive', 'doc': '<p>Is the client keep alive?</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-variable']},
{'name': 'HttpClient.verifyHost', 'type': 'attribute', 'url': 'http/HttpClient.type.html#verifyHost', 'doc': '<p>true if this client will validate the remote server\'s certificate hostname\nagainst the requested host</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-variable']},
{'name': 'HttpClient.connectTimeout', 'type': 'attribute', 'url': 'http/HttpClient.type.html#connectTimeout', 'doc': '<p>The connect timeout in milliseconds.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-variable']},
{'name': 'HttpClient.request', 'type': 'function', 'url': 'http/HttpClient.type.html#request', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an\nHTTP request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.get', 'type': 'function', 'url': 'http/HttpClient.type.html#get', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP GET request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.post', 'type': 'function', 'url': 'http/HttpClient.type.html#post', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP POST request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.options', 'type': 'function', 'url': 'http/HttpClient.type.html#options', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP OPTIONS request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.head', 'type': 'function', 'url': 'http/HttpClient.type.html#head', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP HEAD request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.trace', 'type': 'function', 'url': 'http/HttpClient.type.html#trace', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP TRACE request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.put', 'type': 'function', 'url': 'http/HttpClient.type.html#put', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP PUT request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.delete', 'type': 'function', 'url': 'http/HttpClient.type.html#delete', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP DELETE request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.connect', 'type': 'function', 'url': 'http/HttpClient.type.html#connect', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP CONNECT request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.patch', 'type': 'function', 'url': 'http/HttpClient.type.html#patch', 'doc': '<p>This method returns an <a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> instance which represents an HTTP PATCH request with the specified <code>uri</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient.close', 'type': 'function', 'url': 'http/HttpClient.type.html#close', 'doc': '<p>Close the HTTP client.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClient', 'type': 'class', 'url': 'http/HttpClient.type.html', 'doc': '<p>An HTTP client that maintains a pool of connections to a specific host, at a specific port.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpClientRequest.response', 'type': 'attribute', 'url': 'http/HttpClientRequest.type.html#response', 'doc': '<p>The response promise is resolved when the http client response is available.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClientRequest.stream', 'type': 'value', 'url': 'http/HttpClientRequest.type.html#stream', 'doc': '<p>The write stream of this request</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientRequest.timeout', 'type': 'function', 'url': 'http/HttpClientRequest.type.html#timeout', 'doc': '<p>Set\'s the amount of time after which if a response is not received <code>TimeoutException</code>\nwill be sent to the exception…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClientRequest.write', 'type': 'function', 'url': 'http/HttpClientRequest.type.html#write', 'doc': '<p>Write a chunk to the output body.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientRequest.end', 'type': 'function', 'url': 'http/HttpClientRequest.type.html#end', 'doc': '<p>Ends the response.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientRequest.headers', 'type': 'function', 'url': 'http/HttpClientRequest.type.html#headers', 'doc': '<p>Set the response headers.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientRequest.chunked', 'type': 'attribute', 'url': 'http/HttpClientRequest.type.html#chunked', 'doc': '<p>Is the request chunked?</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl', 'icon-decoration-variable']},
{'name': 'HttpClientRequest', 'type': 'class', 'url': 'http/HttpClientRequest.type.html', 'doc': '<p>Represents a client-side HTTP request.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpClientResponse.statusCode', 'type': 'attribute', 'url': 'http/HttpClientResponse.type.html#statusCode', 'doc': '<p>The HTTP status code of the response</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClientResponse.statusMessage', 'type': 'attribute', 'url': 'http/HttpClientResponse.type.html#statusMessage', 'doc': '<p>The HTTP status code of the response</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClientResponse.headers', 'type': 'value', 'url': 'http/HttpClientResponse.type.html#headers', 'doc': '<p>The http headers</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientResponse.trailers', 'type': 'value', 'url': 'http/HttpClientResponse.type.html#trailers', 'doc': '<p>The http trailers</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClientResponse.cookies', 'type': 'attribute', 'url': 'http/HttpClientResponse.type.html#cookies', 'doc': '<p>The Set-Cookie headers (including trailers)</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpClientResponse.stream', 'type': 'value', 'url': 'http/HttpClientResponse.type.html#stream', 'doc': '<p>The read stream of this request</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientResponse.parseBody', 'type': 'function', 'url': 'http/HttpClientResponse.type.html#parseBody', 'doc': '<p>Parse the input body, the returned promise is resolved with the body.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpClientResponse', 'type': 'class', 'url': 'http/HttpClientResponse.type.html', 'doc': '<p>Represents a client-side HTTP response.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpInput.headers', 'type': 'value', 'url': 'http/HttpInput.type.html#headers', 'doc': '<p>The headers</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpInput.charset', 'type': 'attribute', 'url': 'http/HttpInput.type.html#charset', 'doc': '<p>The charset or null</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpInput.mimeType', 'type': 'attribute', 'url': 'http/HttpInput.type.html#mimeType', 'doc': '<p>The mime type or null</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpInput.parseBody', 'type': 'function', 'url': 'http/HttpInput.type.html#parseBody', 'doc': '<p>Parse the input body, the returned promise is resolved with the body.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpInput.stream', 'type': 'value', 'url': 'http/HttpInput.type.html#stream', 'doc': '<p>The read stream of this request</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpInput', 'type': 'class', 'url': 'http/HttpInput.type.html', 'doc': '<p>Provides access for reading the http headers and the body of an <a class=\'link\' href=\'http/HttpServerRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpServerRequest\'>HttpServerRequest</a> or an <a class=\'link\' href=\'http/HttpClientResponse.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientResponse\'>HttpClientResponse</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'HttpOutput.headers', 'type': 'function', 'url': 'http/HttpOutput.type.html#headers', 'doc': '<p>Set the response headers.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpOutput.write', 'type': 'function', 'url': 'http/HttpOutput.type.html#write', 'doc': '<p>Write a chunk to the output body.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpOutput.stream', 'type': 'value', 'url': 'http/HttpOutput.type.html#stream', 'doc': '<p>The write stream of this request</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpOutput.chunked', 'type': 'value', 'url': 'http/HttpOutput.type.html#chunked', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpOutput.end', 'type': 'function', 'url': 'http/HttpOutput.type.html#end', 'doc': '<p>Ends the response.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'HttpOutput.contentType', 'type': 'function', 'url': 'http/HttpOutput.type.html#contentType', 'doc': '<p>Set the content type of the response.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpOutput', 'type': 'class', 'url': 'http/HttpOutput.type.html', 'doc': '<p>Provides access for writing the headers and  content of an\n<a class=\'link\' href=\'http/HttpClientRequest.type.html\' title=\'Go to io.vertx.ceylon.http::HttpClientRequest\'>HttpClientRequest</a> or an <a class=\'link\' href=\'http/HttpServerResponse.type.html\' title=\'Go to io.vertx.ceylon.http::HttpServerResponse\'>HttpServerResponse</a>.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'HttpServer.requestHandler', 'type': 'function', 'url': 'http/HttpServer.type.html#requestHandler', 'doc': '<p>Set the request handler for the server to <code>requestHandler</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServer.listen', 'type': 'function', 'url': 'http/HttpServer.type.html#listen', 'doc': '<p>Tell the server to start listening on all available interfaces and port <code>port</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServer.close', 'type': 'function', 'url': 'http/HttpServer.type.html#close', 'doc': '<p>Close the server.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServer', 'type': 'class', 'url': 'http/HttpServer.type.html', 'doc': '<p>An HTTP and WebSockets server</p>\n<p>If an instance is instantiated from an event loop then the handlers of the instance will…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpServerFileUpload.readStream', 'type': 'value', 'url': 'http/HttpServerFileUpload.type.html#readStream', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.streamToFileSystem', 'type': 'function', 'url': 'http/HttpServerFileUpload.type.html#streamToFileSystem', 'doc': '<p>Stream the content of this upload to the given <a class=\'link\' href=\'http/HttpServerFileUpload.type.html#filename\' title=\'Go to io.vertx.ceylon.http::HttpServerFileUpload.filename\'>filename</a></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.filename', 'type': 'attribute', 'url': 'http/HttpServerFileUpload.type.html#filename', 'doc': '<p>Returns the filename which was used when upload the file</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.name', 'type': 'attribute', 'url': 'http/HttpServerFileUpload.type.html#name', 'doc': '<p>Returns the name of the attribute</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.contentType', 'type': 'attribute', 'url': 'http/HttpServerFileUpload.type.html#contentType', 'doc': '<p>Returns the contentType for the upload</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.contentTransferEncoding', 'type': 'attribute', 'url': 'http/HttpServerFileUpload.type.html#contentTransferEncoding', 'doc': '<p>Returns the contentTransferEncoding for the upload</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.charset', 'type': 'attribute', 'url': 'http/HttpServerFileUpload.type.html#charset', 'doc': '<p>Returns the charset for the upload</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload.size', 'type': 'attribute', 'url': 'http/HttpServerFileUpload.type.html#size', 'doc': '<p>Returns the size of the upload (in bytes)</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerFileUpload', 'type': 'class', 'url': 'http/HttpServerFileUpload.type.html', 'doc': '<p>Represents an upload from an HTML form.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpServerRequest.response', 'type': 'value', 'url': 'http/HttpServerRequest.type.html#response', 'doc': '<p>The response.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.version', 'type': 'value', 'url': 'http/HttpServerRequest.type.html#version', 'doc': '<p>The HTTP version of the request.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.stream', 'type': 'value', 'url': 'http/HttpServerRequest.type.html#stream', 'doc': '<p>The read stream of this request</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerRequest.method', 'type': 'value', 'url': 'http/HttpServerRequest.type.html#method', 'doc': '<p>The request method</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.uri', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#uri', 'doc': '<p>The request uri</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.path', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#path', 'doc': '<p>The request path</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.query', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#query', 'doc': '<p>The query part of the request uri</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.absoluteURI', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#absoluteURI', 'doc': '<p>Get the absolute URI corresponding to the the HTTP request</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.formAttributes', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#formAttributes', 'doc': '<p>The form attributes when the request is a POST/PUT/PATCH with a <em>application/x-www-form-urlencoded</em> or _multipart/…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.remoteAddress', 'type': 'value', 'url': 'http/HttpServerRequest.type.html#remoteAddress', 'doc': '<p>The remote socket address</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.params', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#params', 'doc': '<p>Returns a map of all the parameters in the request.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.headers', 'type': 'attribute', 'url': 'http/HttpServerRequest.type.html#headers', 'doc': '<p>The headers</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerRequest.parseBody', 'type': 'function', 'url': 'http/HttpServerRequest.type.html#parseBody', 'doc': '<p>Parse the input body, the returned promise is resolved with the body.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerRequest.expectMultiPart', 'type': 'function', 'url': 'http/HttpServerRequest.type.html#expectMultiPart', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest.uploadHandler', 'type': 'function', 'url': 'http/HttpServerRequest.type.html#uploadHandler', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerRequest', 'type': 'class', 'url': 'http/HttpServerRequest.type.html', 'doc': '<p>Represents a server-side HTTP request.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpServerResponse.stream', 'type': 'value', 'url': 'http/HttpServerResponse.type.html#stream', 'doc': '<p>The write stream of this request</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerResponse.status', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#status', 'doc': '<p>Set the status code.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerResponse.write', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#write', 'doc': '<p>Write a chunk to the output body.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerResponse.end', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#end', 'doc': '<p>Ends the response.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerResponse.close', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#close', 'doc': '<p>Close the underlying TCP connection</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerResponse.chunked', 'type': 'attribute', 'url': 'http/HttpServerResponse.type.html#chunked', 'doc': '<p>If <code>chunked</code> is <code>true</code>, this response will use HTTP chunked encoding, and each call to write to the body will…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl', 'icon-decoration-variable']},
{'name': 'HttpServerResponse.headers', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#headers', 'doc': '<p>Set the response headers.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'HttpServerResponse.trailers', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#trailers', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerResponse.sendFile', 'type': 'function', 'url': 'http/HttpServerResponse.type.html#sendFile', 'doc': '<p>Tell the kernel to stream a file as specified by <a class=\'link\' href=\'http/HttpServerResponse.type.html#sendFile-fileName\' title=\'Go to io.vertx.ceylon.http::HttpServerResponse.sendFile.fileName\'>fileName</a>] directly, from disk to the\noutgoing connection,…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'HttpServerResponse', 'type': 'class', 'url': 'http/HttpServerResponse.type.html', 'doc': '<p>Represents a server-side HTTP response.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'HttpVersion', 'type': 'class', 'url': 'http/HttpVersion.type.html', 'doc': '<p>The HTTP version</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract', 'icon-decoration-enumerated']},
{'name': 'http_1_0', 'type': 'object', 'url': 'http/http_1_0.object.html', 'doc': '<p>HTTP 1.0</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'http_1_0', 'type': 'value', 'url': 'http/index.html#http_1_0', 'doc': '<p>HTTP 1.0</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'http_1_1', 'type': 'object', 'url': 'http/http_1_1.object.html', 'doc': '<p>HTTP 1.1</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'http_1_1', 'type': 'value', 'url': 'http/index.html#http_1_1', 'doc': '<p>HTTP 1.1</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.handle', 'type': 'function', 'url': 'http/RouteMatcher.type.html#handle', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.get', 'type': 'function', 'url': 'http/RouteMatcher.type.html#get', 'doc': '<p>Specify a handler that will be called for a matching HTTP GET</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.put', 'type': 'function', 'url': 'http/RouteMatcher.type.html#put', 'doc': '<p>Specify a handler that will be called for a matching HTTP PUT</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.post', 'type': 'function', 'url': 'http/RouteMatcher.type.html#post', 'doc': '<p>Specify a handler that will be called for a matching HTTP POST</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.delete', 'type': 'function', 'url': 'http/RouteMatcher.type.html#delete', 'doc': '<p>Specify a handler that will be called for a matching HTTP DELETE</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.options', 'type': 'function', 'url': 'http/RouteMatcher.type.html#options', 'doc': '<p>Specify a handler that will be called for a matching HTTP OPTIONS</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.head', 'type': 'function', 'url': 'http/RouteMatcher.type.html#head', 'doc': '<p>Specify a handler that will be called for a matching HTTP HEAD</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.trace', 'type': 'function', 'url': 'http/RouteMatcher.type.html#trace', 'doc': '<p>Specify a handler that will be called for a matching HTTP TRACE</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.connect', 'type': 'function', 'url': 'http/RouteMatcher.type.html#connect', 'doc': '<p>Specify a handler that will be called for a matching HTTP CONNECT</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.patch', 'type': 'function', 'url': 'http/RouteMatcher.type.html#patch', 'doc': '<p>Specify a handler that will be called for a matching HTTP PATCH</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.all', 'type': 'function', 'url': 'http/RouteMatcher.type.html#all', 'doc': '<p>Specify a handler that will be called for all HTTP methods</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.getWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#getWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP GET</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.putWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#putWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP PUT</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.postWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#postWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP POST</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.deleteWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#deleteWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP DELETE</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.optionsWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#optionsWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP OPTIONS</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.headWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#headWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP HEAD</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.traceWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#traceWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP TRACE</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.connectWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#connectWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP CONNECT</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.patchWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#patchWithRegEx', 'doc': '<p>Specify a handler that will be called for a matching HTTP PATCH</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.allWithRegEx', 'type': 'function', 'url': 'http/RouteMatcher.type.html#allWithRegEx', 'doc': '<p>Specify a handler that will be called for all HTTP methods</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher.noMatch', 'type': 'function', 'url': 'http/RouteMatcher.type.html#noMatch', 'doc': '<p>Specify a handler that will be called when no other handlers match.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMatcher', 'type': 'class', 'url': 'http/RouteMatcher.type.html', 'doc': '<p>This class allows you to do route requests based on the HTTP verb and the request URI, in a manner similar\nto [Sinatra]…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'io.vertx.ceylon.interop', 'type': 'package', 'url': 'interop/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'EventBusAdapter.unregisterHandler', 'type': 'function', 'url': 'interop/EventBusAdapter.type.html#unregisterHandler', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EventBusAdapter.registerHandler', 'type': 'function', 'url': 'interop/EventBusAdapter.type.html#registerHandler', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EventBusAdapter', 'type': 'class', 'url': 'interop/EventBusAdapter.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'ExceptionSupportAdapter.setErrorHandler', 'type': 'function', 'url': 'interop/ExceptionSupportAdapter.type.html#setErrorHandler', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ExceptionSupportAdapter', 'type': 'class', 'url': 'interop/ExceptionSupportAdapter.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'Utils.rawReadStream', 'type': 'function', 'url': 'interop/Utils.type.html#rawReadStream', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Utils.rawWriteStream', 'type': 'function', 'url': 'interop/Utils.type.html#rawWriteStream', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Utils', 'type': 'class', 'url': 'interop/Utils.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'JavaBridge.getFieldValue', 'type': 'function', 'url': 'interop/JavaBridge.type.html#getFieldValue', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'JavaBridge', 'type': 'class', 'url': 'interop/JavaBridge.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'io.vertx.ceylon.metamodel', 'type': 'package', 'url': 'metamodel/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'findVerticles', 'type': 'function', 'url': 'metamodel/index.html#findVerticles', 'doc': '<p>Find the verticles among the known modules and return a list of verticle factories</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'io.vertx.ceylon.platform', 'type': 'package', 'url': 'platform/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'Container.env', 'type': 'value', 'url': 'platform/Container.type.html#env', 'doc': '<p>Get an unmodifiable map of system, environment variables.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container.config', 'type': 'value', 'url': 'platform/Container.type.html#config', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container.exit', 'type': 'function', 'url': 'platform/Container.type.html#exit', 'doc': '<p>Cause the container to exit</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container.deployWorkerVerticle', 'type': 'function', 'url': 'platform/Container.type.html#deployWorkerVerticle', 'doc': '<p>Deploy a worker verticle programmatically.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container.deployModule', 'type': 'function', 'url': 'platform/Container.type.html#deployModule', 'doc': '<p>Deploy a module programmatically.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container.deployVerticle', 'type': 'function', 'url': 'platform/Container.type.html#deployVerticle', 'doc': '<p>Deploy a verticle programmatically.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Container', 'type': 'class', 'url': 'platform/Container.type.html', 'doc': '<p>This class represents a Verticle\'s view of the container in which it is running.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Deployment.undeploy', 'type': 'function', 'url': 'platform/Deployment.type.html#undeploy', 'doc': '<p>Undeploy the deployment</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Deployment', 'type': 'class', 'url': 'platform/Deployment.type.html', 'doc': '<p>Manage a deployment</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Platform.deploy', 'type': 'function', 'url': 'platform/Platform.type.html#deploy', 'doc': '<p>Deploy a module.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Platform.vertx', 'type': 'value', 'url': 'platform/Platform.type.html#vertx', 'doc': '<p>The Vertx instance used by the platform manager</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Platform.stop', 'type': 'function', 'url': 'platform/Platform.type.html#stop', 'doc': '<p>Stop the platform manager</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Platform', 'type': 'class', 'url': 'platform/Platform.type.html', 'doc': '<p>Represents the Vert.x platform.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'Verticle.start', 'type': 'function', 'url': 'platform/Verticle.type.html#start', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Verticle.stop', 'type': 'function', 'url': 'platform/Verticle.type.html#stop', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Verticle', 'type': 'class', 'url': 'platform/Verticle.type.html', 'doc': '<p>A verticle is the unit of execution in the Vert.x platform\nVert.x code is packaged into Verticle\'s and then deployed…</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'io.vertx.ceylon.shareddata', 'type': 'package', 'url': 'shareddata/index.html', 'doc': '<h1>Shared Data</h1>\n<p>Sometimes it makes sense to allow different verticles instances to share data in a safe way.</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'SharedData.getMap', 'type': 'function', 'url': 'shareddata/SharedData.type.html#getMap', 'doc': '<p>Return a <a class=\'link\' href=\'shareddata/SharedMap.type.html\' title=\'Go to io.vertx.ceylon.shareddata::SharedMap\'>SharedMap</a> with the specific <a class=\'link\' href=\'shareddata/SharedData.type.html#getMap-name\' title=\'Go to io.vertx.ceylon.shareddata::SharedData.getMap.name\'>name</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SharedData.getSet', 'type': 'function', 'url': 'shareddata/SharedData.type.html#getSet', 'doc': '<p>Return a <a class=\'link\' href=\'shareddata/SharedSet.type.html\' title=\'Go to io.vertx.ceylon.shareddata::SharedSet\'>SharedSet</a> with the specific <a class=\'link\' href=\'shareddata/SharedData.type.html#getSet-name\' title=\'Go to io.vertx.ceylon.shareddata::SharedData.getSet.name\'>name</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SharedData.removeMap', 'type': 'function', 'url': 'shareddata/SharedData.type.html#removeMap', 'doc': '<p>Remove the map with the specific <a class=\'link\' href=\'shareddata/SharedData.type.html#removeMap-name\' title=\'Go to io.vertx.ceylon.shareddata::SharedData.removeMap.name\'>name</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SharedData.removeSet', 'type': 'function', 'url': 'shareddata/SharedData.type.html#removeSet', 'doc': '<p>Remove the set with the specific <a class=\'link\' href=\'shareddata/SharedData.type.html#removeSet-name\' title=\'Go to io.vertx.ceylon.shareddata::SharedData.removeSet.name\'>name</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SharedData', 'type': 'class', 'url': 'shareddata/SharedData.type.html', 'doc': '<p>Sometimes it is desirable to share immutable data between different event loops, for example to implement a\ncache of…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'SharedMap.clear', 'type': 'function', 'url': 'shareddata/SharedMap.type.html#clear', 'doc': '<p>Remove every entry from this map, leaving an empty map.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedMap.remove', 'type': 'function', 'url': 'shareddata/SharedMap.type.html#remove', 'doc': '<p>Remove the entry associated with the given <code>key</code>, if any, from\nthis map, returning the value no longer associated with…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedMap.put', 'type': 'function', 'url': 'shareddata/SharedMap.type.html#put', 'doc': '<p>Add an entry to this map, overwriting any existing entry for\nthe given <code>key</code>, and returning the previous value…</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedMap.putIfAbsent', 'type': 'function', 'url': 'shareddata/SharedMap.type.html#putIfAbsent', 'doc': '<p>Same operation than putIfAbsent</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedMap.removeIfEquals', 'type': 'function', 'url': 'shareddata/SharedMap.type.html#removeIfEquals', 'doc': '<p>Same operation than remove</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedMap.replaceIfPresent', 'type': 'function', 'url': 'shareddata/SharedMap.type.html#replaceIfPresent', 'doc': '<p>Same operation than replace</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedMap', 'type': 'interface', 'url': 'shareddata/SharedMap.type.html', 'doc': '<p>A shared map, this class does not use <span title=\'ceylon.collection::MutableMap\'>ceylon.collection::MutableMap</span> at the moment to remain compatible between…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'SharedSet.add', 'type': 'function', 'url': 'shareddata/SharedSet.type.html#add', 'doc': '<p>Add an element to this set, returning true if the element\nwas already a member of the set, or false otherwise.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedSet.remove', 'type': 'function', 'url': 'shareddata/SharedSet.type.html#remove', 'doc': '<p>Remove an element from this set, returning true if the\nelement was previously a member of the set.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedSet.clear', 'type': 'function', 'url': 'shareddata/SharedSet.type.html#clear', 'doc': '<p>Remove every element from this set, leaving an empty set.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SharedSet', 'type': 'interface', 'url': 'shareddata/SharedSet.type.html', 'doc': '<p>A shared set, this class does not use <span title=\'ceylon.collection::MutableSet\'>ceylon.collection::MutableSet</span> at the moment to remain compatible between…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'io.vertx.ceylon.stream', 'type': 'package', 'url': 'stream/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'Pump.setWriteQueueMaxSize', 'type': 'function', 'url': 'stream/Pump.type.html#setWriteQueueMaxSize', 'doc': '<p>Set the write queue max size to `maxSize</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Pump.start', 'type': 'function', 'url': 'stream/Pump.type.html#start', 'doc': '<p>Start the Pump.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Pump.stop', 'type': 'function', 'url': 'stream/Pump.type.html#stop', 'doc': '<p>Stop the Pump.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Pump.bytesPumped', 'type': 'attribute', 'url': 'stream/Pump.type.html#bytesPumped', 'doc': '<p>Return the total number of bytes pumped by this pump.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Pump', 'type': 'class', 'url': 'stream/Pump.type.html', 'doc': '<p>Pumps data from a <a class=\'link\' href=\'stream/ReadStream.type.html\' title=\'Go to io.vertx.ceylon.stream::ReadStream\'>ReadStream</a> to a <a class=\'link\' href=\'stream/WriteStream.type.html\' title=\'Go to io.vertx.ceylon.stream::WriteStream\'>WriteStream</a> and performs flow control where necessary to\nprevent the write…</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'wrapReadStream', 'type': 'function', 'url': 'stream/index.html#wrapReadStream', 'doc': '<p>Create a read stream</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream.dataHandler', 'type': 'function', 'url': 'stream/ReadStream.type.html#dataHandler', 'doc': '<p>Set a data handler.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream.exceptionHandler', 'type': 'function', 'url': 'stream/ReadStream.type.html#exceptionHandler', 'doc': '<p>Set an exception handler.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream.endHandler', 'type': 'function', 'url': 'stream/ReadStream.type.html#endHandler', 'doc': '<p>Set an end handler.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream.pause', 'type': 'function', 'url': 'stream/ReadStream.type.html#pause', 'doc': '<p>Pause the <code>ReadStream</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream.resume', 'type': 'function', 'url': 'stream/ReadStream.type.html#resume', 'doc': '<p>Resume reading.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream.pump', 'type': 'function', 'url': 'stream/ReadStream.type.html#pump', 'doc': '<p>Create a new <a class=\'link\' href=\'stream/Pump.type.html\' title=\'Go to io.vertx.ceylon.stream::Pump\'>Pump</a> with this <code>ReadStream</code> and the given<a class=\'link\' href=\'stream/WriteStream.type.html\' title=\'Go to io.vertx.ceylon.stream::WriteStream\'>WriteStream</a> and <code>writeQueueMaxSize</code></p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ReadStream', 'type': 'class', 'url': 'stream/ReadStream.type.html', 'doc': '<p>Represents a stream of data that can be read from.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'wrapWriteStream', 'type': 'function', 'url': 'stream/index.html#wrapWriteStream', 'doc': '<p>Create a write stream</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'WriteStream.write', 'type': 'function', 'url': 'stream/WriteStream.type.html#write', 'doc': '<p>Write some data to the stream.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'WriteStream.setWriteQueueMaxSize', 'type': 'function', 'url': 'stream/WriteStream.type.html#setWriteQueueMaxSize', 'doc': '<p>Set the maximum size of the write queue to <code>maxSize</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'WriteStream.writeQueueFull', 'type': 'function', 'url': 'stream/WriteStream.type.html#writeQueueFull', 'doc': '<p>This will return <code>true</code> if there are more bytes in the write queue than the value set using  [[…</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'WriteStream.drainHandler', 'type': 'function', 'url': 'stream/WriteStream.type.html#drainHandler', 'doc': '<p>Set a drain handler on the stream.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'WriteStream.exceptionHandler', 'type': 'function', 'url': 'stream/WriteStream.type.html#exceptionHandler', 'doc': '<p>Set an exception handler.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'WriteStream', 'type': 'class', 'url': 'stream/WriteStream.type.html', 'doc': '<p>Represents a stream of data that can be written to.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'io.vertx.ceylon.util', 'type': 'package', 'url': 'util/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'AsyncResultPromise.promise', 'type': 'value', 'url': 'util/AsyncResultPromise.type.html#promise', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AsyncResultPromise.handle', 'type': 'function', 'url': 'util/AsyncResultPromise.type.html#handle', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'AsyncResultPromise', 'type': 'class', 'url': 'util/AsyncResultPromise.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'booleanAsyncResult', 'type': 'function', 'url': 'util/index.html#booleanAsyncResult', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'voidAsyncResult', 'type': 'function', 'url': 'util/index.html#voidAsyncResult', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'stringAsyncResult', 'type': 'function', 'url': 'util/index.html#stringAsyncResult', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'stringArrayAsyncResult', 'type': 'function', 'url': 'util/index.html#stringArrayAsyncResult', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'asyncResult', 'type': 'function', 'url': 'util/index.html#asyncResult', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'FunctionalHandlerAdapter.handle', 'type': 'function', 'url': 'util/FunctionalHandlerAdapter.type.html#handle', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'FunctionalHandlerAdapter', 'type': 'class', 'url': 'util/FunctionalHandlerAdapter.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'functionalHandler', 'type': 'function', 'url': 'util/index.html#functionalHandler', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'combine', 'type': 'function', 'url': 'util/index.html#combine', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'toMap', 'type': 'function', 'url': 'util/index.html#toMap', 'doc': '<p>Convert a Vert.x MultiMap to a Ceylon map</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'fromObject', 'type': 'function', 'url': 'util/index.html#fromObject', 'doc': '<p>Convert a ceylon.json.Object to a Vert.x JsonObject</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'fromArray', 'type': 'function', 'url': 'util/index.html#fromArray', 'doc': '<p>Convert a ceylon.json.Array to a Vert.x JsonArray</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'toObject', 'type': 'function', 'url': 'util/index.html#toObject', 'doc': '<p>Convert a Vert.x JsonObject to a ceylon.json.Object</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'toArray', 'type': 'function', 'url': 'util/index.html#toArray', 'doc': '<p>Convert a Vert.x JsonArray to a ceylon.json.Array</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'toStringIterable', 'type': 'function', 'url': 'util/index.html#toStringIterable', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'fromStringArray', 'type': 'function', 'url': 'util/index.html#fromStringArray', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'io.vertx.ceylon', 'type': 'module', 'url': 'index.html', 'doc': '<h1>Vert.x for Ceylon</h1>\n<p>Vert.x is a lightweight, high performance application platform for the JVM that\'s designed for…</p>\n', 'tags': [],'icons': []}];
var tagIndex = [
];
